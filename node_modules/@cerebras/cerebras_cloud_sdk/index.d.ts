import { type Agent } from "./_shims/index.js";
import * as Core from "./core.js";
import * as Errors from "./error.js";
import * as Uploads from "./uploads.js";
import * as API from "./resources/index.js";
import { Completion, CompletionCreateParams, Completions } from "./resources/completions.js";
import { ModelListParams, ModelListResponse, ModelRetrieveParams, ModelRetrieveResponse, Models } from "./resources/models.js";
import { Chat } from "./resources/chat/chat.js";
import { ChatCompletion, ChatCompletionCreateParams } from "./resources/chat/completions.js";
export interface ClientOptions {
    /**
     * Defaults to process.env['CEREBRAS_API_KEY'].
     */
    apiKey?: string | undefined;
    /**
     * Override the default base URL for the API, e.g., "https://api.example.com/v2/"
     *
     * Defaults to process.env['CEREBRAS_BASE_URL'].
     */
    baseURL?: string | null | undefined;
    /**
     * The maximum amount of time (in milliseconds) that the client should wait for a response
     * from the server before timing out a single request.
     *
     * Note that request timeouts are retried by default, so in a worst-case scenario you may wait
     * much longer than this timeout before the promise succeeds or fails.
     */
    timeout?: number;
    /**
     * An HTTP agent used to manage HTTP(S) connections.
     *
     * If not provided, an agent will be constructed by default in the Node.js environment,
     * otherwise no agent is used.
     */
    httpAgent?: Agent;
    /**
     * Specify a custom `fetch` function implementation.
     *
     * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is
     * defined globally.
     */
    fetch?: Core.Fetch | undefined;
    /**
     * The maximum number of times that the client will retry a request in case of a
     * temporary failure, like a network error or a 5XX error from the server.
     *
     * @default 2
     */
    maxRetries?: number;
    /**
     * Default headers to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * header to `undefined` or `null` in request options.
     */
    defaultHeaders?: Core.Headers;
    /**
     * Default query parameters to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * param to `undefined` in request options.
     */
    defaultQuery?: Core.DefaultQuery;
    /**
     * When true, a request is sent to `/models` in the constructor to open a TCP
     * connection with the API server. This way, the first "real" request will have
     * less latency since it can reuse the already existing socket connection.
     *
     * @default true
     */
    warmTCPConnection?: boolean;
}
/**
 * API Client for interfacing with the Cerebras API.
 */
export declare class Cerebras extends Core.APIClient {
    apiKey: string;
    private _options;
    /**
     * API Client for interfacing with the Cerebras API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['CEREBRAS_API_KEY'] ?? undefined]
     * @param {string} [opts.baseURL=process.env['CEREBRAS_BASE_URL'] ?? https://api.cerebras.ai] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     * @param {boolean | undefined} opts.warmTCPConnection - Whether to warm TCP connection in the constructor.
     */
    constructor({ baseURL, apiKey, warmTCPConnection, ...opts }?: ClientOptions);
    chat: API.Chat;
    completions: API.Completions;
    models: API.Models;
    protected defaultQuery(): Core.DefaultQuery | undefined;
    protected defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers;
    protected authHeaders(opts: Core.FinalRequestOptions): Core.Headers;
    static Cerebras: typeof Cerebras;
    static DEFAULT_TIMEOUT: number;
    static CerebrasError: typeof Errors.CerebrasError;
    static APIError: typeof Errors.APIError;
    static APIConnectionError: typeof Errors.APIConnectionError;
    static APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError;
    static APIUserAbortError: typeof Errors.APIUserAbortError;
    static NotFoundError: typeof Errors.NotFoundError;
    static ConflictError: typeof Errors.ConflictError;
    static RateLimitError: typeof Errors.RateLimitError;
    static BadRequestError: typeof Errors.BadRequestError;
    static AuthenticationError: typeof Errors.AuthenticationError;
    static InternalServerError: typeof Errors.InternalServerError;
    static PermissionDeniedError: typeof Errors.PermissionDeniedError;
    static UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
    static toFile: typeof Uploads.toFile;
    static fileFromPath: typeof Uploads.fileFromPath;
}
export declare namespace Cerebras {
    export type RequestOptions = Core.RequestOptions;
    export { Chat as Chat, type ChatCompletion as ChatCompletion, type ChatCompletionCreateParams as ChatCompletionCreateParams, };
    export { Completions as Completions, type Completion as Completion, type CompletionCreateParams as CompletionCreateParams, };
    export { Models as Models, type ModelRetrieveResponse as ModelRetrieveResponse, type ModelListResponse as ModelListResponse, type ModelRetrieveParams as ModelRetrieveParams, type ModelListParams as ModelListParams, };
}
export { toFile, fileFromPath } from "./uploads.js";
export { CerebrasError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.js";
export default Cerebras;
//# sourceMappingURL=index.d.ts.map