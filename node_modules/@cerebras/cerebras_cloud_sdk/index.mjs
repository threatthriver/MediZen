// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var _a;
import * as Core from "./core.mjs";
import * as Errors from "./error.mjs";
import * as Uploads from "./uploads.mjs";
import * as API from "./resources/index.mjs";
import { Completions } from "./resources/completions.mjs";
import { Models, } from "./resources/models.mjs";
import { Chat } from "./resources/chat/chat.mjs";
/**
 * API Client for interfacing with the Cerebras API.
 */
export class Cerebras extends Core.APIClient {
    /**
     * API Client for interfacing with the Cerebras API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['CEREBRAS_API_KEY'] ?? undefined]
     * @param {string} [opts.baseURL=process.env['CEREBRAS_BASE_URL'] ?? https://api.cerebras.ai] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     * @param {boolean | undefined} opts.warmTCPConnection - Whether to warm TCP connection in the constructor.
     */
    constructor({ baseURL = Core.readEnv('CEREBRAS_BASE_URL'), apiKey = Core.readEnv('CEREBRAS_API_KEY'), warmTCPConnection = true, ...opts } = {}) {
        if (apiKey === undefined) {
            throw new Errors.CerebrasError("The CEREBRAS_API_KEY environment variable is missing or empty; either provide it, or instantiate the Cerebras client with an apiKey option, like new Cerebras({ apiKey: 'My API Key' }).");
        }
        const options = {
            apiKey,
            ...opts,
            baseURL: baseURL || `https://api.cerebras.ai`,
        };
        super({
            baseURL: options.baseURL,
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.chat = new API.Chat(this);
        this.completions = new API.Completions(this);
        this.models = new API.Models(this);
        this._options = options;
        this.apiKey = apiKey;
        if (warmTCPConnection) {
            // Since this runs async, it's possible for DEBUG messages to
            // be printed after test ends, which will cause a warming.
            //
            // Doesn't seem to be an easy way to block until this promise is fulfilled.
            (async () => {
                try {
                    await this.get('/v1/tcp_warming', {
                        timeout: 1000,
                        maxRetries: 0,
                    });
                }
                catch (e) {
                    Core.debug(`TCP Warming had exception: ${e}`);
                }
            })();
        }
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { Authorization: `Bearer ${this.apiKey}` };
    }
}
_a = Cerebras;
Cerebras.Cerebras = _a;
Cerebras.DEFAULT_TIMEOUT = 60000; // 1 minute
Cerebras.CerebrasError = Errors.CerebrasError;
Cerebras.APIError = Errors.APIError;
Cerebras.APIConnectionError = Errors.APIConnectionError;
Cerebras.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
Cerebras.APIUserAbortError = Errors.APIUserAbortError;
Cerebras.NotFoundError = Errors.NotFoundError;
Cerebras.ConflictError = Errors.ConflictError;
Cerebras.RateLimitError = Errors.RateLimitError;
Cerebras.BadRequestError = Errors.BadRequestError;
Cerebras.AuthenticationError = Errors.AuthenticationError;
Cerebras.InternalServerError = Errors.InternalServerError;
Cerebras.PermissionDeniedError = Errors.PermissionDeniedError;
Cerebras.UnprocessableEntityError = Errors.UnprocessableEntityError;
Cerebras.toFile = Uploads.toFile;
Cerebras.fileFromPath = Uploads.fileFromPath;
Cerebras.Chat = Chat;
Cerebras.Completions = Completions;
Cerebras.Models = Models;
export { toFile, fileFromPath } from "./uploads.mjs";
export { CerebrasError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.mjs";
export default Cerebras;
//# sourceMappingURL=index.mjs.map